// allow reads on resources that aren't present.  This is critical because if
// we do not have this rule then when a user tries to read a document that
// does not exist then they will get a "permission failed" error/exception.
// We also need to do this FIRST so that no other rule is evaluated since
// they might result in null pointer exceptions when trying to read the data
// property on a record that does not exist.

allow delete, read: if resource == null || resource.data == null;

// *** updates for default nspace - nspace is the same as their uid (default namespace)

// write new objects
allow write: if (resource == null || resource.data == null) && request.auth.uid == request.resource.data.nspace;

// read or delete but only when the uid is the nspace
allow read, delete: if request.auth.uid == resource.data.nspace;

// write of existing objects if the nspace is correct
allow write: if request.auth.uid == request.resource.data.nspace && resource.data.nspace == request.resource.data.nspace;

// FIXME we need the same permissions but READ only for the block_permission table and and something similar for
// block_permission_user so that users can READ their own block permissions.
