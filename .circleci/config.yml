# % >= 2.1 Required for Orbs
version: 2.1

# @ Custom Orbs
orbs:
  cypress: cypress-io/cypress@1.28.0
  slack: circleci/slack@4.4.4

# @ Define Custom Executors
executors:
  # ! Default Executor for most jobs
  large:
    docker:
      - image: polarciops/ci:latest
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    resource_class: large

  # ! Hefty Jobs like Deployment
  xlarge:
    docker:
      - image: polarciops/ci:latest
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    resource_class: xlarge

  # ! Android Jobs
  android:
    docker:
      - image: cimg/android:2021.10.2-node
    resource_class: xlarge

  # ! Cypress Jobs
  ff-chrome:
    docker:
      - image: cypress/browsers:node14.17.0-chrome88-ff89
    resource_class: xlarge

# @ Pre-Script Steps to Execute before Jobs
commands:
  # & Publishing setup steps
  publishing_setup:
    description: set the SSH keys and Hashes required to deploy
    steps:
      # ! Add SSH Keys for publishing
      - add_ssh_keys:
          fingerprints:
            - "26:22:fe:b3:b7:ce:d8:43:cf:2d:e6:17:26:31:d1:58"
            - "37:a5:24:7a:89:73:b1:cf:11:3d:98:de:b4:50:25:58"
            - "16:e3:06:7e:6e:58:07:3a:20:35:14:c3:7e:98:33:bb"
            - "SHA256:uwzneTU1Stml8f1GDcffUJPK6GxSs77+vMZOHopRJLE burton@getpolarized.io"

  # & Download/Restore pnpm-lock.yaml cache
  restore_pnpm_cache:
    description: Restore all bootstraped module
    steps:
      - restore_cache:
          keys:
            - pnpm-packages-v1-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}

  # & output debug info
  debug_installed:
    description: Debug installed libraries/modules
    steps:
      # ? Debug step for Npm/Pnpm Configuration
      - run:
          name: DEBUG(NPM/Pnpm Setup)
          command: |
            cp .npmrc ~/.npmrc
            cat ~/.npmrc
            echo "npm ping: ======"
            npm ping
            echo "pnpm config list: ======"
            pnpm config list

  # & Hoist all dependencies
  bootstrap:
    description: Hoist all dependencies
    steps:
      - run:
          name: bootstrap
          no_output_timeout: 30m
          command: |
            npm config set legacy-peer-deps true
            pnpm install

  # & Compile all modules
  compile:
    description: compile all modules
    steps:
      - run:
          name: Compile
          command: pnpm run compile-all

  # & Save Cache
  save_pnpm_cache:
    description: save hoisted modules
    steps:
      - save_cache:
          paths:
            - ~/.pnpm-store
          key: pnpm-packages-v1-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}

  # & Persist Workspace
  persist_workspace:
    description: persist files to the next jobs
    steps:
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project

  # & Check new Eslint Rules on New Code
  eslint_diff:
    description: diff eslint output from master
    steps:
      - run:
          name: Diff Eslint
          no_output_timeout: 30m
          command: |
            FORK_POINT=$(git merge-base origin/master $CIRCLE_BRANCH)
            git reset --hard
            git checkout $FORK_POINT
            sed -i 's#"functional/prefer-readonly-type": "off"#"functional/prefer-readonly-type": "error"#g' ./.eslintrc.json
            pnpm run eslint-ci-all >> forkpoint-output.txt || true
            git reset --hard
            git checkout $CIRCLE_BRANCH
            sed -i 's#"functional/prefer-readonly-type": "off"#"functional/prefer-readonly-type": "error"#g' ./.eslintrc.json
            pnpm run eslint-ci-all >> branch-output.txt || true
            sed -i '/Error - /!d' forkpoint-output.txt
            sed -i '/Error - /!d' branch-output.txt
            OUTPUT=$(comm -13 <(sort ./forkpoint-output.txt) <(sort ./branch-output.txt))
            RED='\033[0;31m'
            NC='\033[0m'
            if [ ! -z "$OUTPUT" ]; then echo -e "\n ${RED} Please Fix the Following Errors: \n ${NC} $OUTPUT" && exit 1; fi;

  # & Check for duplicate packages
  check_duplicates:
    description: Check for duplicate packages
    steps:
      - run:
          name: Check if duplicate packages with different versions exist
          command: |
            (cd packages/polar-shared && pnpm run compile)
            (cd packages/polar-npm && pnpm run compile)
            DUPLICATES=$(pnpm -r exec -- node /home/circleci/project/packages/polar-npm/src/npm-dump-dependencies.js | sort | uniq | tr " " "\n" | sed '/[0-9]/d' | sed -r '/^\s*$/d' | uniq -d)
            echo -e "\n\n $DUPLICATES \n\n"
            pnpm -r exec -- node /home/circleci/project/packages/polar-npm/src/npm-dump-dependencies.js | sort | uniq | tr " " "\n" | sed '/[0-9]/d' | sed -r '/^\s*$/d' | uniq -d | if [ $(wc -l) -gt "0" ]; then echo -e '\n\n\033[1mPLEASE FIX DUPLICATE PACKAGES WITH DIFFERENT VERSIONS\033[0m' && exit 1; fi

# ~ Workflow Building Blocks
jobs:
  # ^ Webapp Workflow Jobs
  # @ Build the application for the following steps
  setting-up:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: build the application for all the following steps
    steps:
      - checkout
      - restore_pnpm_cache
      - debug_installed
      - bootstrap
      - compile
      - save_pnpm_cache
      - persist_workspace

  # @ Run Code-Quality Steps
  Code-Quality:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: Check the code Code-Quality
    steps:
      - checkout
      - restore_pnpm_cache
      - bootstrap
      - run:
          name: eslint
          command: pnpm run eslint-ci-all
      - eslint_diff
      - check_duplicates

  # @ Run Karma Test Suite
  karma:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: "Run our karma tests in the browser."
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: karma
          no_output_timeout: 120m
          command: pnpm run karma-all
      - store_test_results:
          path: /home/circleci/project/packages

  # @ Run tests
  mocha:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: "Run our karma tests in the browser."
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: test
          command: (cd /home/circleci/project && pnpm run test-ci-all)
      - store_test_results:
          path: /home/circleci/project/packages

  # @ Build polar chrome extension
  build-chrome-extension:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: "Build the polar chrome extension"
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Build
          command: (cd /home/circleci/project/packages/polar-web-extension/ && pnpm run dist)

  # @ Deploy aws CDK changes
  aws-cdk:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: cdk deploy
          command: |
            cd /home/circleci/project/packages/polar-cdk && pnpm dlx cdk deploy --all --require-approval=never

  # @ Build Polar-Bookshelf Webapp
  build-polar-app:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Build webapp
          command: pnpm run build
      - run:
          name: Verify webapp budget
          command: |

            verify_file_size() {

              path="${1}"
              min="${2}"
              max="${3}"

              filesize=$(stat -c%s "$path")

              if [ $filesize < $min ]; then
                echo "File too small: ${path}. This is a GOOD thing but it means you need to update CI to adjust the budgets."
                return 1
              fi

              if [ $filesize < $max ]; then
                echo "File too large: ${path}"
                return 1
              fi

            }

            cd /home/circleci/project/packages/polar-bookshelf
            cat dist/public/repository-bundle.js | gzip -9 -c > dist/public/repository-bundle.js.gz

            verify_file_size dist/public/repository-bundle.js 6000000 7000000
            verify_file_size dist/public/repository-bundle.js.gz 1000000 1800000

      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project

  # @ Deploy Polar-Bookshelf
  deploy-polar-app:
    parameters:
      executor:
        type: executor
      firebase_hosting_target:
        type: string
    executor: << parameters.executor>>
    steps:
      - publishing_setup
      - attach_workspace:
          at: ~/
      - run:
          name: Automatic Versioning
          command: |
            git fetch
            TEMP_VERSION='\"0.0.0\"'
            CURRENT_VERSION=$(git tag | tr - \~ | sort -V | tr \~ - | tail -n1)
            VERSION=$(semver $CURRENT_VERSION -i)
            NEW_VERSION="\\\""$VERSION"\\\""
            git merge-base $CURRENT_VERSION HEAD --is-ancestor || (echo "YOU CANNOT RELEASE AN OUTDATED BRANCH" && exit 1)
            pnpm -r --no-bail exec -- sed -i "s/$TEMP_VERSION/$NEW_VERSION/g" package.json || true
            git tag -a "$VERSION" -m "automated tag version $VERSION"
            LATEST_VERSION=$(git tag | tr - \~ | sort -V | tr \~ - | tail -n1)
            echo -e "Current Latest Version is $LATEST_VERSION" && echo -e "Pushing New Tag"
            LOG=$(git log --pretty=format:"• %b\\n" --merges $LATEST_VERSION...$CURRENT_VERSION) || LOG="• fix: Minor Fixes for Release"
            ~/go/bin/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${LATEST_VERSION}
            TEMP_DATE=$(date +"%a %b %d %Y")
            echo "export DATE=\"$TEMP_DATE\"" >> $BASH_ENV
            echo "export TAG=\"$LATEST_VERSION\"" >> $BASH_ENV
            echo "export CHANGELOG=\"$LOG\"" >> $BASH_ENV
      - run:
          name: Setup Credentials and Deploy Packages to Verdaccio
          no_output_timeout: 120m
          command: |
            npm config set always-auth true
            source packages/polar-bookshelf-secrets/credentials.sh
            rm -f ~/.npmrc && cat .npmrc > ~/.npmrc
            pnpm run publish-all
            (cd packages/polar-webapp-dist && pnpm run dist)
      - run:
          name: Deploy to Firebase Hosting & Cloud Functions
          no_output_timeout: 120m
          command: |
            export FIREBASE_HOSTING_TARGET=<< parameters.firebase_hosting_target >>
            (cd /home/circleci/project/packages/polar-hooks && echo Pushing to target ${FIREBASE_HOSTING_TARGET} && firebase use polar-32b0f && firebase target:clear hosting app.getpolarized.io && firebase target:apply hosting app.getpolarized.io ${FIREBASE_HOSTING_TARGET} && firebase deploy --only hosting,storage,firestore)
            mv /home/circleci/project/packages/polar-hooks/ /home/circleci/
            rm -rf /home/circleci/project
            cd /home/circleci/polar-hooks
            rm -rf node_modules && rm -rf functions/node_modules && pnpm install && (cd functions && pnpm install)
            time firebase deploy --only functions
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "New Version Released :tada::tada:"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Tag:*\n • $TAG"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When:*\n • $DATE"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Changelog:*\n $CHANGELOG"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View on Github",
                        "emoji": true
                      },
                      "style": "primary",
                      "url": "https://github.com/polar-app/polar-app/releases/tag/$TAG"
                    }
                  ]
                }
              ]
            }
          event: pass

  # ^ Mobile Workflow
  # @ Build Setup
  build-setup:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    description: Build node Environment
    steps:
      - checkout
      - run:
          name: isolate
          command: |
            git fetch
            CURRENT_VERSION=$(git tag | tr - \~ | sort -V | tr \~ - | tail -n1)
            mv /home/circleci/project/packages-isolated/mobile /home/circleci/
            rm -rf /home/circleci/project
      - run:
          name: pnpm install
          command: |
            cd /home/circleci/mobile
            sed -i "s/0.0.0/$CURRENT_VERSION/g" package.json
            pnpm install
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - mobile

  # @ Build fastlane for deployment
  Android-Internal:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: build fastlane for ci
    working_directory: ~/mobile/android
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Bundle & Deploy
          command: |
            bundle update fastlane
            touch google-play-service-account.json
            echo $ANDROID_DEPLOYMENT_CONFIG >> google-play-service-account.json
            bundle exec fastlane run google_play_track_version_codes
            bundle exec fastlane run validate_play_store_json_key
            bundle exec fastlane beta

  Android-Release:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: build fastlane for ci
    working_directory: ~/mobile/android
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Bundle & Deploy
          command: |
            bundle update fastlane
            touch google-play-service-account.json
            echo $ANDROID_DEPLOYMENT_CONFIG >> google-play-service-account.json
            bundle exec fastlane run google_play_track_version_codes
            bundle exec fastlane run validate_play_store_json_key
            bundle exec fastlane release

  IOS-Testflight:
    working_directory: ~/mobile/ios
    macos:
      xcode: "13.0.0"
    shell: /bin/bash --login -o pipefail
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Bundle & Deploy
          command: |
            bundle update fastlane
            pod install
            bundle exec fastlane beta

  IOS-Release:
    working_directory: ~/mobile/ios
    macos:
      xcode: "13.0.0"
    shell: /bin/bash --login -o pipefail
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Bundle & Deploy
          command: |
            bundle update fastlane
            pod install
            bundle exec fastlane release

# ~ Define Workflow Steps
workflows:
  Webapp:
    jobs:
      ## ^ Approve the entire pipeline to start deployment
      - approve-deploy:
          type: approval
          filters:
            branches:
              only:
                - master

      ## ^ Commonality Between Sub-Workflows
      # @ Setup the repo for the subsquent stages
      - setting-up:
          executor: large

      # @ Check Code Quality
      - Code-Quality:
          executor: large

      ## ^ Chrome Extension Sub-Workflow
      # @ Setup the repo for the subsquent stages
      - build-chrome-extension:
          executor: large
          requires:
            - Code-Quality
            - setting-up

      ## ^ Polar App Sub-Workflow Below Here
      # @ Run Karma Tests
      - karma:
          executor: large
          requires:
            - Code-Quality
            - setting-up

      - mocha:
          executor: large
          requires:
            - Code-Quality
            - setting-up

      # @ Build Polar app
      - build-polar-app:
          executor: large
          requires:
            - Code-Quality
            - setting-up

      # @ Run Cypress tests for chrome-desktop (1080p)
      - cypress/run:
          name: cypress-desktop-chrome
          executor: ff-chrome
          requires:
            - build-polar-app
          working_directory: /root/project/packages/polar-bookshelf
          start: export WEBPACK_BUNDLE=repository && time yarn run webpack-serve
          wait-on: "http://localhost:8050"
          command: npx cypress install && npx cypress run --env WIDTH=1920,HEIGHT=1080 --browser chrome
          attach-workspace: true
          store_artifacts: true

      # # @ Run Cypress tests for firefox-desktop (1080p)
      # - cypress/run:
      #     name: cypress-desktop-firefox
      #     executor: ff-chrome
      #     requires:
      #       - build-polar-app
      #     working_directory: /root/project/packages/polar-bookshelf
      #     start: export WEBPACK_BUNDLE=repository && time time npm run webpack-serve
      #     wait-on: "http://localhost:8050"
      #     command: npx cypress install && npx cypress run --env WIDTH=1920,HEIGHT=1080 --browser firefox
      #     attach-workspace: true
      #     store_artifacts: true

      # # @ Run Cypress tests for chrome-mobile (using iPhone 11 pro viewport)
      # - cypress/run:
      #     name: cypress-phone-chrome
      #     executor: ff-chrome
      #     requires:
      #       - build-polar-app
      #     working_directory: /root/project/packages/polar-bookshelf
      #     start: export WEBPACK_BUNDLE=repository && time time npm run webpack-serve
      #     wait-on: "http://localhost:8050"
      #     command: npx cypress install && npx cypress run --env WIDTH=375,HEIGHT=812 --browser firefox
      #     attach-workspace: true
      #     store_artifacts: true

      # # @ Run Cypress tests for chrome-tablet (using iPad pro viewport)
      # - cypress/run:
      #     name: cypress-tablet-chrome
      #     executor: ff-chrome
      #     requires:
      #       - build-polar-app
      #     working_directory: /root/project/packages/polar-bookshelf
      #     start: export WEBPACK_BUNDLE=repository && time time npm run webpack-serve
      #     wait-on: "http://localhost:8050"
      #     command: npx cypress install && npx cypress run --env WIDTH=1024,HEIGHT=1366 --browser firefox
      #     attach-workspace: true
      #     store_artifacts: true

      # @ Deploy CDK lambda/API-gateway Changes
      - aws-cdk:
          executor: large
          requires:
            - approve-deploy
            - mocha
            - karma
          filters:
            branches:
              only:
                - master

      # @ Deploy Approved Polar app build
      - deploy-polar-app:
          context:
            - Slack
          executor: xlarge
          firebase_hosting_target: polar-webapp
          requires:
            - approve-deploy
            - build-polar-app
            - mocha
            - karma
            - cypress-desktop-chrome
            # - cypress-desktop-firefox
            # - cypress-tablet-chrome
            # - cypress-phone-chrome
          filters:
            branches:
              only:
                - master

  IOS-Android:
    when:
      equal: [master, << pipeline.git.branch >>]
    jobs:
      - Approve-Android-Internal:
          type: approval

      - Approve-Android-Release:
          type: approval

      - Approve-IOS-Testflight:
          type: approval

      - Approve-IOS-Release:
          type: approval

      - build-setup:
          executor: large

      - Android-Internal:
          executor: android
          requires:
            - Approve-Android-Internal
            - build-setup

      - Android-Release:
          executor: android
          requires:
            - Approve-Android-Release
            - build-setup

      - IOS-Testflight:
          requires:
            - Approve-IOS-Testflight
            - build-setup

      - IOS-Release:
          requires:
            - Approve-IOS-Release
            - build-setup
