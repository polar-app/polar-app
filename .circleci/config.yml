version: 2.1

orbs:
  win: circleci/windows@2.2.0

commands:
  build_setup:
    description: setup the build for commands
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints:
            - "26:22:fe:b3:b7:ce:d8:43:cf:2d:e6:17:26:31:d1:58"
            - "37:a5:24:7a:89:73:b1:cf:11:3d:98:de:b4:50:25:58"
            - "16:e3:06:7e:6e:58:07:3a:20:35:14:c3:7e:98:33:bb"
            - "SHA256:uwzneTU1Stml8f1GDcffUJPK6GxSs77+vMZOHopRJLE burton@getpolarized.io"

      # Download and cache dependencies
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-

      # I think bytesafe might not work with npm v7
      #- run:
      #    name: "Install latest NPM"
      #    command: sudo npm -g install npm

      # Comment out the stage for now
      # - run:
      #     name: NPM node_modules cache stats
      #     command: |
      #       du -h ./node_modules | tail -1

      - run:
          name: Install global node modules
          command: |
            sudo npm -g install lerna@4.0.0
            sudo npm -g install npm@7.19.1
            sudo npm -g install firebase-tools@9.12.1

      #            sudo npm -g install yarn@1.22.10

      - run:
          name: Node and NPM version
          command: |
            echo -n "Node version: "
            node --version
            echo -n "NPM version: "
            npm --version
            echo -n "Yarn version: "
            yarn --version
            echo -n "Lerna version: "
            lerna --version
            echo -n "firebase version: "
            firebase --version

      - run:
          name: OS environment
          command: |
            echo $OSTYPE
            uname -a

      - run:
          name: Required Linux packages (when on Linux)
          # libvips is needed by sharp which is needed by gatsby
          command: if [ "$OSTYPE" = 'linux-gnu' ]; then sudo apt-get update && sudo apt-get install libvips libvips-dev pngquant; fi

      - run:
          name: NPM setup
          command: |
            cp .npmrc.bytesafe ~/.npmrc
            cat ~/.npmrc
            echo "npm ping: ======"
            npm ping
            echo "npm config list: ======"
            npm config list
            echo "npm config ls -l: ======"
            npm config ls -l

      - run:
          name: lerna bootstrap
          no_output_timeout: 30m
          # command: npm run-script purge-node-modules && npx lerna bootstrap
          command: |
            npm config set legacy-peer-deps true
            npx lerna bootstrap --ci

      - save_cache:
          paths:
            - ~/.cache/yarn
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

      #- run:
      #    name: Required Linux packages (when on Linux)
      #    command: if [ "$OSTYPE" = 'linux-gnu' ]; then sudo apt-get install libgtk-3-0 libnss3 libxss1 libasound2 libxtst6; fi

      - run:
          name: compile
          command: npx lerna run compile

jobs:
  build:
    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>

    working_directory: ~/repo

    description: "Build the main code and run 'npm test'"

    steps:
      - build_setup
      - run:
          name: test
          command: npx lerna run test

  karma:
    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>

    working_directory: ~/repo

    description: "Run our karma tests in the browser."

    steps:
      - build_setup
      - run:
          name: karma
          command: |
            cd packages/polar-bookshelf
            sudo apt-get install chromium
            export CHROME_BIN='/usr/bin/chromium'
            yarn run webpack
            yarn run karma

  end2end:
    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - build_setup

      - run:
          name: Run X virtual framebuffer (Linux)
          command: |
            if [ "$OSTYPE" = 'linux-gnu' ]; then
              Xvfb -ac :99 -screen 0 1280x1024x16 +extension RANDR > /dev/null 2>&1
            else
              echo "Not running Xvfb (not linux)"
            fi
          background: true

  build-webapp:
    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - build_setup

      - run:
          name: build and verify webapp
          command: |
            cd packages/polar-bookshelf && \
            free -m && \
            yarn run build-webapp && \
            echo "Webapp Built Successfully" && \
            pwd && \
            cat dist/public/repository-bundle.js | gzip -c > dist/public/repository-bundle.js.gz
            find dist/public/repository-bundle.js.gz -size +1300000c |tee /dev/stderr| egrep '.*'

  build-site:
    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - build_setup

      - run:
          name: build and verify site (getpolarized.io)
          command: |
            pwd
            cd packages/polar-site2
            yarn run dist

  deploy_app_getpolarized_io:
    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor
      firebase_hosting_target:
        description: "The npm target to run in the final step."
        type: string

    executor: << parameters.executor>>
    working_directory: ~/repo
    steps:
      - build_setup

      - run:
          name: init - setup credentials and bytesafe
          no_output_timeout: 120m
          command: |
            npm config set always-auth true
            source packages/polar-bookshelf-secrets/credentials.sh
            yarn run set-registry-bytesafe-rw
            lerna bootstrap
            lerna run compile
            lerna run test
            yarn run dist-validate-env
            lerna exec --concurrency=1 --parallel=false --no-private  --no-bail -- yarn publish --verbose
            (cd packages/polar-app-private/polar-webapp-dist && yarn run dist)

      - run:
          name: release
          no_output_timeout: 120m
          command: |
            source packages/polar-bookshelf-secrets/credentials.sh
            yarn run set-registry-bytesafe-rw
            export FIREBASE_HOSTING_TARGET=<< parameters.firebase_hosting_target >>
            (cd packages/polar-app-private/polar-hooks/functions && rm -rf node_modules && npm install)
            (cd packages/polar-app-private/polar-hooks/functions && echo Pushing to target ${FIREBASE_HOSTING_TARGET} && firebase use polar-32b0f && firebase target:clear hosting app.getpolarized.io && firebase target:apply hosting app.getpolarized.io ${FIREBASE_HOSTING_TARGET} && firebase deploy --only hosting,storage,firestore)
            (cd packages/polar-app-private/polar-hooks/ && ./sbin/firebase-deploy-functions)

  deploy_getpolarized_io:
    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>
    working_directory: ~/repo
    steps:
      - run:
          name: deploy
          command: |
            pwd
            cd packages/polar-site2
            yarn run dist-release
  cypress:
    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>
    working_directory: ~/repo
    steps:
      - build_setup

      - run:
          name: install prereqs
          command: |
            sudo apt-get update
            sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - run:
          name: install chromium
          command: |
            sudo apt-get update
            sudo apt-get install chromium

      - run:
          name: init
          command: |
            cd packages/polar-bookshelf
            npx webpack-dev-server &

            waitport() {
                while ! nc -z localhost $1 ; do sleep 1 ; done
            }

            echo "Starting to wait for HTTP server on port 8050"
            waitport 8050
            echo "HTTP server running on port 8050! Starting to test now..."

            npx cypress run --browser chromium --headless

executors:
  my-docker:
    docker:
      # https://circleci.com/docs/2.0/circleci-images/
      # https://circleci.com/docs/2.0/docker-image-tags.json
      - image: circleci/node:14.16.0-buster

    # https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: xlarge

  my-macos:
    macos:
      # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: 12.4.0

workflows:
  version: 2
  main:
    jobs:
      #      - build_with_executor:
      #          executor:
      #            name: win/default
      #            shell: bash.exe
      #
      - build:
          executor: my-docker
      - karma:
          executor: my-docker
      - build-webapp:
          executor: my-docker
      - build-site:
          executor: my-docker

      - hold_app_getpolarized_io:
          type: approval
          requires:
            - build
            - karma
            - build-webapp
          filters:
            branches:
              only:
                - master

      - deploy_app_getpolarized_io:
          executor: my-docker
          firebase_hosting_target: polar-webapp
          requires:
            - hold_app_getpolarized_io
          filters:
            branches:
              only:
                - master

      - hold_getpolarized_io:
          type: approval
          requires:
            - build-site
          filters:
            branches:
              only:
                - master

      - deploy_getpolarized_io:
          executor: my-docker
          requires:
            - hold_getpolarized_io
          filters:
            branches:
              only:
                - master
#  cypress:
#    jobs:
#      - cypress:
#          executor: my-docker

#  macos:
#    jobs:
#
#      - build:
#          executor: my-macos
#      - build-webapp:
#          executor: my-macos
#      - build-site:
#          executor: my-macos

#      - end2end:
#          executor:
#            name: win/default
#            shell: bash.exe
#
#      - end2end:
#          executor: my-docker
#
#      - end2end:
#          executor: my-macos
#

