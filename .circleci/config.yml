# TODO:
#
# - cache the .npm cache dir

version: 2.1

orbs:
  win: circleci/windows@2.2.0

commands:
  build_setup:
    description: setup the build for commands
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints:
            - "26:22:fe:b3:b7:ce:d8:43:cf:2d:e6:17:26:31:d1:58"
            - "37:a5:24:7a:89:73:b1:cf:11:3d:98:de:b4:50:25:58"
            - "16:e3:06:7e:6e:58:07:3a:20:35:14:c3:7e:98:33:bb"
            - "SHA256:uwzneTU1Stml8f1GDcffUJPK6GxSs77+vMZOHopRJLE burton@getpolarized.io"

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-{{ arch }}-dependencies-{{ checksum "package.json" }}

      #- run:
      #    name: "Install latest NPM"
      #    command: sudo npm -g install npm@7.5.3

      - run:
          name: Node and NPM version
          command: |
            echo "Node version: "
            node --version
            echo "NPM version: "
            npm --version

      - run:
          name: OS environment
          command: echo $OSTYPE

      - run:
          name: npm setup
          command: |
            # npm run-script set-registry-bytesafe-rw
            cp .npmrc.bytesafe ~/.npmrc
            cat ~/.npmrc
            npm ping

      - run:
          name: install lerna
          command: npm install lerna

      - run:
          name: setup full dependencies
          command: npm run-script purge-node-modules && npx lerna bootstrap

      - save_cache:
          paths:
            - node_modules
          key: v1-{{ arch }}-dependencies-{{ checksum "package.json" }}

      #- run:
      #    name: Required Linux packages (when on Linux)
      #    command: if [ "$OSTYPE" = 'linux-gnu' ]; then sudo apt-get install libgtk-3-0 libnss3 libxss1 libasound2 libxtst6; fi

      - run:
          name: compile
          command: npx lerna run compile

jobs:
  build:

    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>

    working_directory: ~/repo

    steps:

      - build_setup
      - run:
          name: test
          command: npx lerna run test

  end2end:

    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - build_setup

      - run:
          name: Run X virtual framebuffer (Linux)
          command: |
            if [ "$OSTYPE" = 'linux-gnu' ]; then
              Xvfb -ac :99 -screen 0 1280x1024x16 +extension RANDR > /dev/null 2>&1
            else
              echo "Not running Xvfb (not linux)"
            fi
          background: true

      - run:
          name: Spectron Tests
          command: |
            export DISPLAY=:99 &&
            export SPECTRON_OFFSCREEN=true &&
            source packages/polar-bookshelf-secrets/build-env.sh &&
            cd packages/polar-bookshelf &&
            echo "Running E2E tests..." &&
            npx mocha --timeout 60000 --exit web/spectron0/browser-capture/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron0/content-capture/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron0/firebase-cloud-aware-datastore/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron0/doc-info-advertisements/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron1/firebase-groups/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron2/toaster/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron2/toaster-logger/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron2/ui-notifier/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron3/sentry-test/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron3/repository-app/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron3/text-node-splitting/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron4/persistent-error-logger/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron4/open-phz-file-with-arg/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron4/open-pdf-file-with-arg/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron4/net-request/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron5/main-app-with-import/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron5/firebase-datastore/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron5/main-app/spec.js &&
            npx mocha --timeout 60000 --exit web/spectron5/main-app-with-empty-repo/spec.js

  build-webapp:

    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - build_setup

      - run:
          name: build and verify webapp
          command: |
            cd packages/polar-bookshelf && \
            free -m && \
            npm run-script build-webapp && \
            echo "Webapp Built Successfully" && \
            pwd && \
            cat dist/public/repository-bundle.js | gzip -c > dist/public/repository-bundle.js.gz
            find dist/public/repository-bundle.js.gz -size +1300000c |tee /dev/stderr| egrep '.*'

  build-site:
    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - build_setup

      - run:
          name: build and verify site (getpolarized.io)
          command: |
            cd packages/polar-site2 && \
            npm run-script dist

  deploy:
    parameters:
      executor:
        description: "The CircleCI executor to use."
        type: executor

    executor: << parameters.executor>>
    working_directory: ~/repo
      - build_setup

      - hold:
          type: approval

      - run:
          name: dist-release-webapp
          command: echo hello world

executors:
  my-docker:
    docker:
      - image: circleci/node:14.15.4-buster

    # https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: large

  my-macos:
    macos:
      # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: 12.4.0

workflows:
  version: 2
  parallel_workflow:
    jobs:
#      - build_with_executor:
#          executor:
#            name: win/default
#            shell: bash.exe

      - build:
          executor: my-docker
      - build-webapp:
          executor: my-docker
      - build-site:
          executor: my-docker

      - deploy:
          executor: my-docker
          requires:
            - build-site
            - build-webapp
            - build

#      - build:
#          executor: my-macos
#      - build-webapp:
#          executor: my-macos
#      - build-site:
#          executor: my-macos

#      - end2end:
#          executor:
#            name: win/default
#            shell: bash.exe
#
#      - end2end:
#          executor: my-docker
#
#      - end2end:
#          executor: my-macos
#
