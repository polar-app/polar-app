# % >= 2.1 Required for Orbs
version: 2.1

# @ Custom Orbs
orbs:
  cypress: cypress-io/cypress@1.28.0
  slack: circleci/slack@4.4.4

# ~ Pre-Script Steps to Execute before Jobs
commands:
  # & Tag Publishing Setup
  tag_publishing_setup:
    description: Tag Publishing Setup
    steps:
      # ! Install Go,ghr,config git
      - run:
          name: Tag Publishing Setup
          command: |
            mkdir ~/.ssh
            sudo apt install golang-go
            go get -u github.com/tcnksm/ghr
            export GOPATH="$HOME/go"
            PATH="$GOPATH/bin:$PATH"
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config --global user.email "$CI_PUBLISHER_EMAIL"
            git config --global user.name "$CI_PUBLISHER_NAME"

  # & Publishing setup steps
  publishing_setup:
    description: set the SSH keys and Hashes required to deploy
    steps:
      # ! Add SSH Keys for publishing
      - add_ssh_keys:
          fingerprints:
            - "26:22:fe:b3:b7:ce:d8:43:cf:2d:e6:17:26:31:d1:58"
            - "37:a5:24:7a:89:73:b1:cf:11:3d:98:de:b4:50:25:58"
            - "16:e3:06:7e:6e:58:07:3a:20:35:14:c3:7e:98:33:bb"
            - "SHA256:uwzneTU1Stml8f1GDcffUJPK6GxSs77+vMZOHopRJLE burton@getpolarized.io"

  # & Install Global Modules
  global_modules_setup:
    description: install global modules
    steps:
      # ! Install Basic Modules { lerna, npm, firebase tools }
      - run:
          name: Install global node_modules
          command: |
            sudo yarn global add lerna@4.0.0
            sudo yarn global add npm@7.19.1
            sudo yarn global add firebase-tools@9.16.0
            sudo yarn global add semver

  # & Download/Restore yarn.lock cache
  restore_yarn_cache:
    description: Restore all bootstraped module
    steps:
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

  # & Install Required Linux Binary (libvips is needed by sharp which is needed by gatsby)
  install_linux_dependencies:
    description: Download/Install all our linux Dependencies/Binaries
    steps:
      - run:
          name: Required Linux packages
          command: if [ "$OSTYPE" = 'linux-gnu' ]; then sudo apt update -y && sudo apt install libvips libvips-dev pngquant -y; fi

  # & output debug info
  debug_installed:
    description: Debug installed libraries/modules
    steps:
      # ? Debug Step for Node/Npm/Yarn/Lerna/Firebase Versions
      - run:
          name: DEBUG(Node, NPM, Yarn, Lerna & Firebase Versions)
          command: |
            echo -e "Node version: $(node --version) \n"
            echo -e "NPM version: $(npm --version) \n"
            echo -e "Yarn version: $(yarn --version) \n"
            echo -e "Lerna version: $(lerna --version) \n"
            echo -e "firebase version: $(firebase --version) \n"

      # ? Debug Step for OS version
      - run:
          name: DEBUG(OS Environment)
          command: |
            echo $OSTYPE
            uname -a

      # ? Debug step for Npm/Yarn Configuration
      - run:
          name: DEBUG(NPM/Yarn Setup)
          command: |
            cp .npmrc ~/.npmrc
            cat ~/.npmrc
            echo "npm ping: ======"
            npm ping
            echo "npm config ls -l: ======"
            npm config ls -l
            echo "yarn config list: ======"
            yarn config list

  # & Hoist all dependencies
  bootstrap:
    description: Hoist all dependencies
    steps:
      - run:
          name: lerna bootstrap
          no_output_timeout: 30m
          command: |
            npm config set legacy-peer-deps true
            lerna bootstrap --ci && find node_modules -type l -name 'polar*' -exec rm '{}' ';' && lerna link

  # & Check for duplicate packages
  check_duplicates:
    description: Check for duplicate packages
    steps:
      - run:
          name: DEBUG(Check if duplicate packages with different versions exist)
          command: |
            (cd packages/polar-shared && yarn run compile)
            (cd packages/polar-npm && yarn run compile)
            DUPLICATES=$(lerna exec --concurrency=1 --parallel=false --no-bail -- node /home/circleci/project/packages/polar-npm/src/npm-dump-dependencies.js | sort | uniq | tr " " "\n" | sed '/[0-9]/d' | sed -r '/^\s*$/d' | uniq -d)
            echo -e "\n\n $DUPLICATES \n\n"
            lerna exec --concurrency=1 --parallel=false --no-bail -- node /home/circleci/project/packages/polar-npm/src/npm-dump-dependencies.js | sort | uniq | tr " " "\n" | sed '/[0-9]/d' | sed -r '/^\s*$/d' | uniq -d | if [ $(wc -l) -gt "0" ]; then echo -e '\n\n\033[1mPLEASE FIX DUPLICATE PACKAGES WITH DIFFERENT VERSIONS\033[0m' && exit 1; fi

  # & Compile all lerna modules
  compile:
    description: compile all lerna modules
    steps:
      - run:
          name: lerna run compile
          command: lerna run compile

  # & lint all lerna modules
  eslint:
    description: lint all lerna modules
    steps:
      - run:
          name: lerna run eslint
          command: lerna run eslint

  # & Save Cache
  save_yarn_cache:
    description: save hoisted modules
    steps:
      - save_cache:
          paths:
            - ~/.cache/yarn
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

  # & Persist Workspace
  persist_workspace:
    description: persist files to the next jobs
    steps:
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project

# ~ Workflow Building Blocks
jobs:
  # ^ Webapp Workflow Jobs
  # @ Build the application for the following steps
  setting-up:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: build the application for all the following steps
    steps:
      - global_modules_setup
      - checkout
      - restore_yarn_cache
      - install_linux_dependencies
      - debug_installed
      - bootstrap
      - eslint
      - compile
      - save_yarn_cache
      - persist_workspace

  # @ Run Karma Test Suite
  karma:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: "Run our karma tests in the browser."
    steps:
      - attach_workspace:
          at: ~/
      - global_modules_setup
      - run:
          name: karma
          command: |
            sudo apt update -y && sudo apt install chromium --fix-missing -y
            export CHROME_BIN='/usr/bin/chromium'
            lerna run karma
      - store_test_results:
          path: /home/circleci/project/packages

  # @ Run tests
  mocha:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: "Run our karma tests in the browser."
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: test
          command: |
            cd /home/circleci/project
            lerna run citest
      - store_test_results:
          path: /home/circleci/project/packages

  # @ Build polar chrome extension
  build-chrome-extension:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: "Build the polar chrome extension"
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Build
          command: |
            cd /home/circleci/project/packages/polar-web-extension/
            export POLAR_EXTENSION_TYPE=PROD
            yarn run dist

  # @ Deploy aws CDK changes
  aws-cdk:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: cdk deploy
          command: |
            cd /home/circleci/project/packages/polar-cdk
            ENV_NAME=master npx cdk deploy --all --require-approval=never

  # @ Build Polar-Bookshelf Webapp
  build-polar-app:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: build and verify webapp
          command: |
            cd /home/circleci/project/packages/polar-bookshelf && \
            free -m && \
            yarn run build-webapp && \
            echo "Webapp Built Successfully" && \
            cat dist/public/repository-bundle.js | gzip -c > dist/public/repository-bundle.js.gz
            find dist/public/repository-bundle.js.gz -size +1300000c |tee /dev/stderr| egrep '.*'
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project

  # @ Deploy Polar-Bookshelf
  deploy-polar-app:
    parameters:
      executor:
        type: executor
      firebase_hosting_target:
        type: string
    executor: << parameters.executor>>
    steps:
      - global_modules_setup
      - publishing_setup
      - tag_publishing_setup
      - attach_workspace:
          at: ~/
      - run:
          name: Automatic Versioning
          command: |
            git fetch
            TEMP_VERSION='0.0.0'
            CURRENT_VERSION=$(git tag | tr - \~ | sort -V | tr \~ - | tail -n1)
            NEW_VERSION=$(semver $CURRENT_VERSION -i)
            git merge-base $CURRENT_VERSION HEAD --is-ancestor || (echo "YOU CANNOT RELEASE AN OUTDATED BRANCH" && exit 1)
            sed -i "s/"$TEMP_VERSION"/$NEW_VERSION/g" lerna.json
            lerna exec -- sed -i "s/"$TEMP_VERSION"/$NEW_VERSION/g" package.json
            git tag -a "$NEW_VERSION" -m "automated tag version $NEW_VERSION"
            LATEST_VERSION=$(git tag | tr - \~ | sort -V | tr \~ - | tail -n1)
            echo -e "Current Latest Version is $LATEST_VERSION" && echo -e "Pushing New Tag"
            LOG=$(git log --pretty=format:"• %s\\n" --no-merges $LATEST_VERSION...$CURRENT_VERSION | grep "• feat:\|• fix:\|• docs:\|• style:\|• refactor:\|• perf:\|• test:\|• build:\|• ci:\|• chore:\|• revert:" | sort | uniq | tr '\r\n' ' ' ) || LOG="• fix: Minor Fixes for Release"
            ~/go/bin/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${LATEST_VERSION}
            TEMP_DATE=$(date +"%a %b %d %Y")
            echo "export DATE=\"$TEMP_DATE\"" >> $BASH_ENV
            echo "export TAG=\"$LATEST_VERSION\"" >> $BASH_ENV
            echo "export CHANGELOG=\"$LOG\"" >> $BASH_ENV
      - run:
          name: Setup Credentials and Deploy Packages to Verdaccio
          no_output_timeout: 120m
          command: |
            npm config set always-auth true
            source packages/polar-bookshelf-secrets/credentials.sh
            rm -f ~/.npmrc && cat .npmrc > ~/.npmrc
            lerna run test
            yarn run dist-validate-env
            lerna exec --concurrency=1 --parallel=false --no-private  --no-bail -- yarn publish --verbose
            (cd packages/polar-webapp-dist && yarn run dist)
      - run:
          name: Deploy to Firebase Hosting & Cloud Functions
          no_output_timeout: 120m
          command: |
            export FIREBASE_HOSTING_TARGET=<< parameters.firebase_hosting_target >>
            (cd /home/circleci/project/packages/polar-hooks && echo Pushing to target ${FIREBASE_HOSTING_TARGET} && firebase use polar-32b0f && firebase target:clear hosting app.getpolarized.io && firebase target:apply hosting app.getpolarized.io ${FIREBASE_HOSTING_TARGET} && firebase deploy --only hosting,storage,firestore)
            mv /home/circleci/project/packages/polar-hooks/ /home/circleci/
            rm -rf /home/circleci/project
            cd /home/circleci/polar-hooks
            rm -rf node_modules && rm -rf functions/node_modules && yarn install && (cd functions && yarn install)
            time firebase deploy --only functions
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "New Version Released :tada::tada:"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Tag:*\n • $TAG"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When:*\n • $DATE"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Changelog:*\n $CHANGELOG"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View on Github",
                        "emoji": true
                      },
                      "style": "primary",
                      "url": "https://github.com/polar-app/polar-app/releases/tag/$TAG"
                    }
                  ]
                }
              ]
            }
          event: pass

  # ^ Mobile Workflow
  # @ Build Setup
  build-setup:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    description: build node Environment)
    steps:
      - checkout
      - run:
          name: isolate
          command: |
            git fetch
            CURRENT_VERSION=$(git tag | tr - \~ | sort -V | tr \~ - | tail -n1)
            mv /home/circleci/project/packages/polar-mobile-app /home/circleci/
            rm -rf /home/circleci/project
      - run:
          name: yarn install
          command: |
            cd /home/circleci/polar-mobile-app
            sed -i "s/0.0.0/$CURRENT_VERSION/g" package.json
            yarn install
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - polar-mobile-app

  # @ Build fastlane for deployment
  Android:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor>>
    description: build fastlane for ci
    working_directory: ~/polar-mobile-app/android
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Bundle & Deploy
          command: |
            bundle update fastlane
            touch google-play-service-account.json
            echo $ANDROID_DEPLOYMENT_CONFIG >> google-play-service-account.json
            bundle exec fastlane run google_play_track_version_codes
            bundle exec fastlane run validate_play_store_json_key
            bundle exec fastlane beta

  IOS:
    working_directory: ~/polar-mobile-app/ios
    macos:
      xcode: "13.0.0"
    shell: /bin/bash --login -o pipefail
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Bundle & Deploy
          command: |
            bundle update fastlane
            pod install
            bundle exec fastlane beta

# ~ Define Custom Executors
executors:
  # ! Default Executor for most jobs
  xlarge:
    docker:
      - image: circleci/node:14.17.0-buster
    resource_class: xlarge
  large:
    docker:
      - image: circleci/node:14.17.0-buster
    resource_class: large
  android:
    docker:
      - image: circleci/android:api-30-node
    resource_class: xlarge
  ff-chrome:
    docker:
      - image: cypress/browsers:node14.17.0-chrome88-ff89
    resource_class: xlarge

# ~ Define Workflow Steps
workflows:
  Webapp:
    jobs:
      ## ^ Approve the entire pipeline to start deployment
      - approve-deploy:
          type: approval
          filters:
            branches:
              only:
                - master

      ## ^ Commonality Between Sub-Workflows
      # @ Setup the repo for the subsquent stages
      - setting-up:
          executor: large

      ## ^ Chrome Extension Sub-Workflow
      # @ Setup the repo for the subsquent stages
      - build-chrome-extension:
          executor: large
          requires:
            - setting-up

      ## ^ Polar App Sub-Workflow Below Here
      # @ Run Karma Tests
      - karma:
          executor: large
          requires:
            - setting-up

      - mocha:
          executor: large
          requires:
            - setting-up

      # @ Build Polar app
      - build-polar-app:
          executor: large
          requires:
            - setting-up

      # @ Run Cypress tests for chrome-desktop (1080p)
      # - cypress/run:
      #     name: cypress-desktop-chrome
      #     executor: ff-chrome
      #     requires:
      #       - build-polar-app
      #     working_directory: /root/project/packages/polar-bookshelf
      #     start: export WEBPACK_BUNDLE=repository && time yarn run webpack-serve
      #     wait-on: "http://localhost:8050"
      #     command: npx cypress install && npx cypress run --env WIDTH=1920,HEIGHT=1080 --browser chrome
      #     attach-workspace: true
      #     store_artifacts: true

      # # @ Run Cypress tests for firefox-desktop (1080p)
      # - cypress/run:
      #     name: cypress-desktop-firefox
      #     executor: ff-chrome
      #     requires:
      #       - build-polar-app
      #     working_directory: /root/project/packages/polar-bookshelf
      #     start: export WEBPACK_BUNDLE=repository && time time yarn run webpack-serve
      #     wait-on: "http://localhost:8050"
      #     command: npx cypress install && npx cypress run --env WIDTH=1920,HEIGHT=1080 --browser firefox
      #     attach-workspace: true
      #     store_artifacts: true

      # # @ Run Cypress tests for chrome-mobile (using iPhone 11 pro viewport)
      # - cypress/run:
      #     name: cypress-phone-chrome
      #     executor: ff-chrome
      #     requires:
      #       - build-polar-app
      #     working_directory: /root/project/packages/polar-bookshelf
      #     start: export WEBPACK_BUNDLE=repository && time time yarn run webpack-serve
      #     wait-on: "http://localhost:8050"
      #     command: npx cypress install && npx cypress run --env WIDTH=375,HEIGHT=812 --browser firefox
      #     attach-workspace: true
      #     store_artifacts: true

      # # @ Run Cypress tests for chrome-tablet (using iPad pro viewport)
      # - cypress/run:
      #     name: cypress-tablet-chrome
      #     executor: ff-chrome
      #     requires:
      #       - build-polar-app
      #     working_directory: /root/project/packages/polar-bookshelf
      #     start: export WEBPACK_BUNDLE=repository && time time yarn run webpack-serve
      #     wait-on: "http://localhost:8050"
      #     command: npx cypress install && npx cypress run --env WIDTH=1024,HEIGHT=1366 --browser firefox
      #     attach-workspace: true
      #     store_artifacts: true

      # @ Deploy CDK lambda/API-gateway Changes
      - aws-cdk:
          executor: large
          requires:
            - approve-deploy
            - mocha
            - karma
          filters:
            branches:
              only:
                - master

      # @ Deploy Approved Polar app build
      - deploy-polar-app:
          context:
            - Slack
          executor: xlarge
          firebase_hosting_target: polar-webapp
          requires:
            - approve-deploy
            - build-polar-app
            - mocha
            - karma
            # - cypress-desktop-firefox
            # - cypress-desktop-chrome
            # - cypress-tablet-chrome
            # - cypress-phone-chrome
          filters:
            branches:
              only:
                - master

  IOS-Android:
    when:
      equal: [master, << pipeline.git.branch >>]
    jobs:
      - Approve-Android:
          type: approval

      - Approve-IOS:
          type: approval

      - build-setup:
          executor: large

      - Android:
          executor: android
          requires:
            - Approve-Android
            - build-setup

      - IOS:
          requires:
            - Approve-Android
            - build-setup
